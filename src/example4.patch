diff --git a/src/diff.rs b/src/diff.rs
index 3757767..0aeba60 100644
--- a/src/diff.rs
+++ b/src/diff.rs
@@ -37,13 +37,12 @@ impl Diff {
             deltas: deltas_regex.captures_iter(&diff_str).map(|cap| {
                 let header = group_as_string(&cap, "header");
                 let hunk = group_as_string(&cap, "hunk");
+            dbg!("DELTA");
-                Delta {
-                    file_header: header.clone(),
-                    old_file: group_as_string(&cap, "old_file"),
-                    new_file: group_as_string(&cap, "new_file"),
-                    hunks: hunks_regex.captures_iter(&hunk)
+                let hunks = hunks_regex.captures_iter(&hunk)
                         .map(|hunk_cap| {
+            dbg!("HUNK");
+
                             Hunk {
                                 file_header: header.clone(),
                                 old_start: group_as_u32(&hunk_cap, "old_start"),
@@ -53,7 +52,13 @@ impl Diff {
                                 header_suffix: group_as_string(&hunk_cap, "header_suffix"),
                                 content: group_as_string(&hunk_cap, "content")
                              }})
-                        .collect::<Vec<_>>() }
+                        .collect::<Vec<_>>();
+
+                Delta {
+                    file_header: header.clone(),
+                    old_file: group_as_string(&cap, "old_file"),
+                    new_file: group_as_string(&cap, "new_file"),
+                    hunks }
             }).collect::<Vec<_>>()
         }
     }
diff --git a/src/main.rs b/src/main.rs
index 6f7d006..d22ee32 100644
--- a/src/main.rs
+++ b/src/main.rs
@@ -83,6 +83,8 @@ fn create_status_items() -> Vec<Item> {
     items
 }
+// test
+
 fn git(args: &[&'_ str]) -> String {
     String::from_utf8(Command::new("git").args(args).output().expect("Couldn't execute 'git'").stdout).unwrap()
 }
@@ -134,6 +136,8 @@ fn create_status_section<'a>(diff: diff::Diff, header: &str) -> Vec<Item> {
     items
 }
+// Another
+
 fn ui(frame: &mut Frame, state: &State) {
     let lines = collapsed_items_iter(&state.items)
         .map(|(i, item)| (i, item))

